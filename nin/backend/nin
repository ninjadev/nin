#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');

var compile = require('./compile');
var generate = require('./generate/generate');
var init = require('./init');
var render = require('./render');
var serve = require('./serve');
var utils = require('./utils');

program.Command.prototype._outputHelp = program.Command.prototype.outputHelp;
program.Command.prototype.outputHelp = function() {
    this._outputHelp(utils.colorizeCommanderHelpText);
};

program
  .command('init')
  .description('Turn the current directory into a nin project')
  .action(function(options) {
    init.init(process.cwd());
  });

program
  .command('compile')
  .description('Compile the nin project')
  .option('--no-png-compression', 'Do not use the .png.html compression trick')
  .action(function(options){
    compile.compile(utils.findProjectRootOrExit(process.cwd()), {
        pngCompress: options.pngCompression
    });
  });

program
  .command('run')
  .description('Run the backend project')
  .action(function() {
    serve.serve(utils.findProjectRootOrExit(process.cwd()));
  });

program
  .command('headless')
  .description('Run the backend project headlessly')
  .action(function() {
    var shouldRunHeadlessly = true;
    serve.serve(utils.findProjectRootOrExit(process.cwd()), shouldRunHeadlessly);
  });

program
  .command('render')
  .description('Render recorded pngs to a video file')
  .action(function(project) {
    render.render(utils.findProjectRootOrExit(process.cwd()));
  });

program
  .command('generate [resource] [name]')
  .description('Generate resources')
  .action(function(resource, name) {
    var projectRoot = utils.findProjectRootOrExit(process.cwd());
    generate.generate(projectRoot, resource, name);
  });

program.parse(process.argv);

if(!process.argv.slice(2).length) {
  program.outputHelp();
}
